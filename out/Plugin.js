'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _fs = require('fs');

var _os = require('os');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The require-coverage plugin
 */
var Plugin = function () {
  function Plugin() {
    _classCallCheck(this, Plugin);
  }

  _createClass(Plugin, [{
    key: 'handleOptions',


    /**
     * Handles options passed through the plugin key inside esdoc.json
     * @param {Object} [options] The options to use
     * @param {Number} [options.required=Plugin.DefaultOptions.required] The coverage percentage
     * required
     */
    value: function handleOptions(options) {
      var opts = Object.assign(Plugin.DefaultOptions, options);

      /**
       * The coverage percentage required
       * @type {Number}
       */
      this._required = opts.required;
    }

    /**
     * Handles configuration passed in esdoc.json
     * @param {Object} config The ESDoc configuration stored inside esdoc.json
     * @param {String} config.destination Needed for plugin to work
     */

  }, {
    key: 'handleConfig',
    value: function handleConfig(config) {
      /**
       * Path to the coverage.json file generated by ESDoc
       */
      this._coverageFilePath = (0, _path.join)(config.destination, 'coverage.json');
    }

    /**
     * Checks the docs coverage against the limit specified in options
     * @throws {Error} Throws an error if coverage.json-file cannot be found
     * @throws {Error} Throws an error if coverage percentage is less than required
     */

  }, {
    key: 'checkCoverage',
    value: function checkCoverage() {
      var coverageReport = void 0;

      try {
        coverageReport = JSON.parse((0, _fs.readFileSync)(this._coverageFilePath));
      } catch (_) {
        throw new Error('coverage.json file not found. Double-check ESDoc finished.');
      }

      var covered = parseFloat(/([0-9.]+)%/.exec(coverageReport.coverage)[1], 10);

      if (covered < this._required) {
        throw new Error('Coverage is at ' + covered + '%, (' + this._required + '% required)' + _os.EOL);
      }
    }
  }], [{
    key: 'DefaultOptions',


    /**
     * The default options to use
     * @type {Object}
     * @property {Number} required=90 The coverage percentage required
     */
    get: function get() {
      return {
        required: 90
      };
    }
  }]);

  return Plugin;
}();

exports.default = Plugin;